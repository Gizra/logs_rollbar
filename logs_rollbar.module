<?php

/**
 * @file
 * Logs HTTP module.
 */

/**
 * Implements hook_menu().
 */
function logs_rollbar_menu() {
  $items = array();

  $items['admin/config/services/logs-rollbar-settings'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Logs Rollbar Client',
    'description' => 'Administer Rollbar Client settings.',
    'access arguments' => array('administer rollbar'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('logs_rollbar_admin_settings'),
    'file' => 'logs_rollbar.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_boot().
 *
 * Runs even for cached pages.
 */
function logs_rollbar_boot() {
  drupal_register_shutdown_function('logs_rollbar_shutdown');
  set_exception_handler('_logs_rollbar_exception_handler');
}


/**
 * Provides custom PHP exception handling.
 *
 * Uncaught exceptions are those not enclosed in a try/catch block. They are
 * always fatal: the execution of the script will stop as soon as the exception
 * handler exits.
 *
 * @param $exception
 *   The exception object that was thrown.
 *
 * @see _drupal_exception_handler()
 */
function _logs_rollbar_exception_handler($exception) {
  require_once DRUPAL_ROOT . '/includes/errors.inc';

  try {
    // Log the message to the watchdog and return an error page to the user.
    _drupal_log_error(_logs_rollbar_decode_exception($exception), TRUE);
  }
  catch (Exception $exception2) {
    // Another uncaught exception was thrown while handling the first one.
    // If we are displaying errors, then do so with no possibility of a further uncaught exception being thrown.
    if (error_displayable()) {
      print '<h1>Additional uncaught exception thrown while handling exception.</h1>';
      print '<h2>Original</h2><p>' . _drupal_render_exception_safe($exception) . '</p>';
      print '<h2>Additional</h2><p>' . _drupal_render_exception_safe($exception2) . '</p><hr />';
    }
  }
}

/**
 * Decodes an exception and retrieves the correct caller.
 *
 * @param $exception
 *   The exception object that was thrown.
 *
 * @return array
 *   An error in the format expected by _drupal_log_error().
 *
 * @see _drupal_decode_exception()
 */
function _logs_rollbar_decode_exception($exception) {
  $return = _drupal_decode_exception($exception);

  // We have to serialize and encode the array here to prevent a notice in
  // theme_dblog_message(). We will decode the string back in
  // logs_rollbar_watchdog()
  $return['exception_trace'] = drupal_base64_encode(serialize($exception->getTrace()));
  return $return;

}

/**
 * Runs on shutdown to clean up and display developer information.
 *
 * devel_boot() registers this function as a shutdown function.
 */
function logs_rollbar_shutdown() {
  if (!$events = logs_rollbar_get_registered_events()) {
    return;
  }

  // If not disabled.
  if (!$url = logs_rollbar_get_http_url()) {
    return;
  }

  // Post to rollbar.
  logs_rollbar_rollbar_post($events, $url);

}

/**
 * Run rollbar API
 */
function logs_rollbar_rollbar_post($events, $url) {
  global $user;
  $config = array(
    // required
    'access_token' => variable_get('logs_rollbar_rollbar_access_token', NULL),
    'local_username' => isset($user->name) ? $user->name : 'anonymous',
    // optional - environment name. any string will do.
    'environment' => logs_rollbar_get_env_uuid(),
    'base_api_url' => $url,
  );
  // Log with Rollbar
  Rollbar::init($config);

  // Send events to logs.
  foreach ($events as $event) {
    // Send data to Logs.
    switch ($event['severity']) {
      case WATCHDOG_ALERT:
      case WATCHDOG_CRITICAL:
      case WATCHDOG_EMERGENCY:
      case WATCHDOG_ERROR:
        $level = 'error';
        break;
      case WATCHDOG_WARNING:
        $level = 'warning';
        break;
      case WATCHDOG_INFO:
      case WATCHDOG_DEBUG:
      case WATCHDOG_NOTICE:
        $level = 'info';
        break;
      default:
        $level = 'info';
        break;
    }
    Rollbar::report_message("{$event['type']} : {$event['message']}", $level, $event);
  }
}

/**
 * Implements hook_init().
 */
function logs_rollbar_init() {
  // If php support is turned off then return.
  if (!variable_get('logs_rollbar_rollbar_access_token_js', 0)) {
    return;
  }
  // If not disabled.
  if (!$base_url = logs_rollbar_get_http_url()) {
    return;
  }
  // Client settings.
  $token = check_plain(variable_get('logs_rollbar_rollbar_access_token_js', ''));
  $env = check_plain(logs_rollbar_get_env_uuid());

  // I had some issues appending this via jQuery and using Drupal.behaviors,
  // so have opted to use javascript, in line with Rollbar.com
  // documentation this is essentially an exact copy of the code
  // located @ https://rollbar.com/docs/notifier/rollbar.js
  $js = <<<END
    var _rollbarConfig = {
    accessToken: "$token",
    captureUncaught: true,
    captureUnhandledRejections: true,
    endpoint: "{$base_url}item/",
    payload: {
      environment: "$env"
    }
  };
  // Rollbar Snippet
  !function(r){function e(n){if(o[n])return o[n].exports;var t=o[n]={exports:{},id:n,loaded:!1};return r[n].call(t.exports,t,t.exports,e),t.loaded=!0,t.exports}var o={};return e.m=r,e.c=o,e.p="",e(0)}([function(r,e,o){"use strict";var n=o(1),t=o(4);_rollbarConfig=_rollbarConfig||{},_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||"https://cdnjs.cloudflare.com/ajax/libs/rollbar.js/2.3.9/rollbar.min.js",_rollbarConfig.async=void 0===_rollbarConfig.async||_rollbarConfig.async;var a=n.setupShim(window,_rollbarConfig),l=t(_rollbarConfig);window.rollbar=n.Rollbar,a.loadFull(window,document,!_rollbarConfig.async,_rollbarConfig,l)},function(r,e,o){"use strict";function n(r){return function(){try{return r.apply(this,arguments)}catch(r){try{console.error("[Rollbar]: Internal error",r)}catch(r){}}}}function t(r,e){this.options=r,this._rollbarOldOnError=null;var o=s++;this.shimId=function(){return o},"undefined"!=typeof window&&window._rollbarShims&&(window._rollbarShims[o]={handler:e,messages:[]})}function a(r,e){if(r){var o=e.globalAlias||"Rollbar";if("object"==typeof r[o])return r[o];r._rollbarShims={},r._rollbarWrappedError=null;var t=new p(e);return n(function(){e.captureUncaught&&(t._rollbarOldOnError=r.onerror,i.captureUncaughtExceptions(r,t,!0),i.wrapGlobals(r,t,!0)),e.captureUnhandledRejections&&i.captureUnhandledRejections(r,t,!0);var n=e.autoInstrument;return e.enabled!==!1&&(void 0===n||n===!0||"object"==typeof n&&n.network)&&r.addEventListener&&(r.addEventListener("load",t.captureLoad.bind(t)),r.addEventListener("DOMContentLoaded",t.captureDomContentLoaded.bind(t))),r[o]=t,t})()}}function l(r){return n(function(){var e=this,o=Array.prototype.slice.call(arguments,0),n={shim:e,method:r,args:o,ts:new Date};window._rollbarShims[this.shimId()].messages.push(n)})}var i=o(2),s=0,d=o(3),c=function(r,e){return new t(r,e)},p=d.bind(null,c);t.prototype.loadFull=function(r,e,o,t,a){var l=function(){var e;if(void 0===r._rollbarDidLoad){e=new Error("rollbar.js did not load");for(var o,n,t,l,i=0;o=r._rollbarShims[i++];)for(o=o.messages||[];n=o.shift();)for(t=n.args||[],i=0;i<t.length;++i)if(l=t[i],"function"==typeof l){l(e);break}}"function"==typeof a&&a(e)},i=!1,s=e.createElement("script"),d=e.getElementsByTagName("script")[0],c=d.parentNode;s.crossOrigin="",s.src=t.rollbarJsUrl,o||(s.async=!0),s.onload=s.onreadystatechange=n(function(){if(!(i||this.readyState&&"loaded"!==this.readyState&&"complete"!==this.readyState)){s.onload=s.onreadystatechange=null;try{c.removeChild(s)}catch(r){}i=!0,l()}}),c.insertBefore(s,d)},t.prototype.wrap=function(r,e,o){try{var n;if(n="function"==typeof e?e:function(){return e||{}},"function"!=typeof r)return r;if(r._isWrap)return r;if(!r._rollbar_wrapped&&(r._rollbar_wrapped=function(){o&&"function"==typeof o&&o.apply(this,arguments);try{return r.apply(this,arguments)}catch(o){var e=o;throw"string"==typeof e&&(e=new String(e)),e._rollbarContext=n()||{},e._rollbarContext._wrappedSource=r.toString(),window._rollbarWrappedError=e,e}},r._rollbar_wrapped._isWrap=!0,r.hasOwnProperty))for(var t in r)r.hasOwnProperty(t)&&(r._rollbar_wrapped[t]=r[t]);return r._rollbar_wrapped}catch(e){return r}};for(var u="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleUnhandledRejection,captureEvent,captureDomContentLoaded,captureLoad".split(","),f=0;f<u.length;++f)t.prototype[u[f]]=l(u[f]);r.exports={setupShim:a,Rollbar:p}},function(r,e){"use strict";function o(r,e,o){if(r){var t;"function"==typeof e._rollbarOldOnError?t=e._rollbarOldOnError:r.onerror&&!r.onerror.belongsToShim&&(t=r.onerror,e._rollbarOldOnError=t);var a=function(){var o=Array.prototype.slice.call(arguments,0);n(r,e,t,o)};a.belongsToShim=o,r.onerror=a}}function n(r,e,o,n){r._rollbarWrappedError&&(n[4]||(n[4]=r._rollbarWrappedError),n[5]||(n[5]=r._rollbarWrappedError._rollbarContext),r._rollbarWrappedError=null),e.handleUncaughtException.apply(e,n),o&&o.apply(r,n)}function t(r,e,o){if(r){"function"==typeof r._rollbarURH&&r._rollbarURH.belongsToShim&&r.removeEventListener("unhandledrejection",r._rollbarURH);var n=function(r){var o,n,t;try{o=r.reason}catch(r){o=void 0}try{n=r.promise}catch(r){n="[unhandledrejection] error getting `promise` from event"}try{t=r.detail,!o&&t&&(o=t.reason,n=t.promise)}catch(r){t="[unhandledrejection] error getting `detail` from event"}o||(o="[unhandledrejection] error getting `reason` from event"),e&&e.handleUnhandledRejection&&e.handleUnhandledRejection(o,n)};n.belongsToShim=o,r._rollbarURH=n,r.addEventListener("unhandledrejection",n)}}function a(r,e,o){if(r){var n,t,a="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(n=0;n<a.length;++n)t=a[n],r[t]&&r[t].prototype&&l(e,r[t].prototype,o)}}function l(r,e,o){if(e.hasOwnProperty&&e.hasOwnProperty("addEventListener")){for(var n=e.addEventListener;n._rollbarOldAdd&&n.belongsToShim;)n=n._rollbarOldAdd;var t=function(e,o,t){n.call(this,e,r.wrap(o),t)};t._rollbarOldAdd=n,t.belongsToShim=o,e.addEventListener=t;for(var a=e.removeEventListener;a._rollbarOldRemove&&a.belongsToShim;)a=a._rollbarOldRemove;var l=function(r,e,o){a.call(this,r,e&&e._rollbar_wrapped||e,o)};l._rollbarOldRemove=a,l.belongsToShim=o,e.removeEventListener=l}}r.exports={captureUncaughtExceptions:o,captureUnhandledRejections:t,wrapGlobals:a}},function(r,e){"use strict";function o(r,e){this.impl=r(e,this),this.options=e,n(o.prototype)}function n(r){for(var e=function(r){return function(){var e=Array.prototype.slice.call(arguments,0);if(this.impl[r])return this.impl[r].apply(this.impl,e)}},o="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleUnhandledRejection,_createItem,wrap,loadFull,shimId,captureEvent,captureDomContentLoaded,captureLoad".split(","),n=0;n<o.length;n++)r[o[n]]=e(o[n])}o.prototype._swapAndProcessMessages=function(r,e){this.impl=r(this.options);for(var o,n,t;o=e.shift();)n=o.method,t=o.args,this[n]&&"function"==typeof this[n]&&("captureDomContentLoaded"===n||"captureLoad"===n?this[n].apply(this,[t[0],o.ts]):this[n].apply(this,t));return this},r.exports=o},function(r,e){"use strict";r.exports=function(r){return function(e){if(!e&&!window._rollbarInitialized){r=r||{};for(var o,n,t=r.globalAlias||"Rollbar",a=window.rollbar,l=function(r){return new a(r)},i=0;o=window._rollbarShims[i++];)n||(n=o.handler),o.handler._swapAndProcessMessages(l,o.messages);window[t]=n,window._rollbarInitialized=!0}}}}]);
END;
  // End Rollbar Snippet";

  // Add the function, we add it after drupal
  // and jquery have been loaded.
  // but before everything else.
  drupal_add_js($js, array(
    'type' => 'inline',
    'scope' => 'header',
    'weight' => -99,
    'group' => JS_LIBRARY
  ));
}


/**
 * Register an event in a static cache.
 *
 * To prevent multiple registration of the same error, we check that identical
 * events are not captured twice, thus reducing the final HTTP requests needed.
 *
 * @param array $log_entry
 *   The entry log as passed from hook_watchdog().
 */
function logs_rollbar_register_event(array $log_entry) {
  if (!logs_rollbar_get_http_url()) {
    return;
  }

  $events = &drupal_static('logs_rollbar_events', array());

  $event = array(
    'timestamp' => $log_entry['timestamp'],
    'type' => $log_entry['type'],
    'ip' => $log_entry['ip'],
    'request_uri' => $log_entry['request_uri'],
    'referer' => $log_entry['referer'],
    'uid' => $log_entry['uid'],
    'link' => strip_tags($log_entry['link']),
    'message' => empty($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']),
    'severity' => $log_entry['severity'],
  );

  if (!empty($log_entry['variables']['exception_trace'])) {
    // @todo: We avoid unserializing as it seems to causes Logs to fail
    // to index event as JSON.
    $event['exception_trace'] = base64_decode($log_entry['variables']['exception_trace']);
  }

  if ($uuid = logs_rollbar_get_env_uuid()) {
    $event['uuid'] = $uuid;
  }

  // Remove empty values, to prevent errors in the indexing of the JSON.
  $event = logs_rollbar_array_remove_empty($event);

  // Prevent identical events.
  $event_clone = $event;
  unset($event_clone['timestamp']);
  $key = md5(serialize($event_clone));
  $events[$key] = $event;
}

/**
 * Get the registered events from the static cache.
 *
 * @return array
 *   Array of events.
 */
function logs_rollbar_get_registered_events() {
  $events = &drupal_static('logs_rollbar_events', array());
  return $events;
}

/**
 * Implements hook_permission().
 */
function logs_rollbar_permission() {
  $permissions = array();

  $permissions['administer rollbar'] = array(
    'title' => t('Administer Rollbar'),
  );

  return $permissions;
}

/**
 * Implements hook_watchdog().
 *
 * Register watchdog events.
 */
function logs_rollbar_watchdog(array $log_entry) {
  if ($log_entry['severity'] > variable_get('logs_rollbar_severity_level', WATCHDOG_ERROR)) {
    // Severity level is above the ones we want to log.
    return;
  }

  logs_rollbar_register_event($log_entry);
}

/**
 * Return the endpoint URL to POST data to.
 *
 * @return string
 *   Return the URL if exists, or NULL if disabled.
 */
function logs_rollbar_get_http_url() {
  if (!variable_get('logs_rollbar_enabled', TRUE)) {
    // Don't register the event.
    return FALSE;
  }

  // Auto disable on local.
  if (variable_get('logs_rollbar_auto_disable_on_local', TRUE) && logs_rollbar_is_local()) {
    return FALSE;
  }

  return variable_get('logs_rollbar_url', 'https://api.rollbar.com/api/1/');
}

/**
 * Check if local env.
 *
 * @return bool
 */
function logs_rollbar_is_local() {
  // Pantheon unique ID.
  if (getenv('PANTHEON_SITE_NAME')) {
    return FALSE;
  }
  // Platform sh unique ID.
  elseif (getenv('PLATFORM_ENVIRONMENT')) {
    return FALSE;
  }
  // Acquia unique ID.
  elseif (getenv('AH_SITE_GROUP')) {
    return FALSE;
  }

  return TRUE;
}


/**
 * Deep array filter.
 *
 * Remove empty values.
 *
 * @param $haystack
 *   The variable to filter.
 *
 * @return mixed
 */
function logs_rollbar_array_remove_empty($haystack) {
  foreach ($haystack as $key => $value) {
    if (is_array($value)) {
      $haystack[$key] = logs_rollbar_array_remove_empty($haystack[$key]);
    }

    if (empty($haystack[$key])) {
      unset($haystack[$key]);
    }
  }

  return $haystack;
}

/**
 * Get default env uuid.
 *
 * @return string
 */
function logs_rollbar_get_env_uuid() {
  // Pantheon unique ID.
  if (getenv('PANTHEON_SITE_NAME')) {
    // Set server uuid to ENV.dev / ENV.test ...
    $server_uuid =  getenv('PANTHEON_SITE_NAME') . '.' . getenv('PANTHEON_ENVIRONMENT');
  }
  // Platform sh unique ID.
  elseif (getenv('PLATFORM_ENVIRONMENT')) {
    $server_uuid = getenv('PLATFORM_ENVIRONMENT');
  }
  // Acquia unique ID.
  elseif (getenv('AH_SITE_GROUP')) {
    $server_uuid = $_ENV['AH_SITE_GROUP'] . '.' . $_ENV['AH_SITE_ENVIRONMENT'];
  }
  // Other local env.
  else {
    require_once DRUPAL_ROOT . '/includes/common.inc';
    $server_uuid = drupal_get_profile() . '-local-' . gethostname();
  }

  return $server_uuid;
}

